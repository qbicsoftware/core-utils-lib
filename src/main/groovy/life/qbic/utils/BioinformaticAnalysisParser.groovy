package life.qbic.utils

import com.fasterxml.jackson.databind.ObjectMapper
import groovy.util.logging.Log4j2
import java.nio.file.NotDirectoryException
import java.nio.file.Path
import java.text.ParseException


/**
 * <h1>Parser storing the filetree of a nf-core pipeline output directory into JSON format</h1>
 * <br>
 * <p>Converts a filetree generated by a nf-core pipeline into a JSON String similar to {@link NanoporeParser}
 *
 * @since: 1.8.0
 * @param directory path of nf-core directory whose fileTree should be converted into a JSON String
 *
 */

@Log4j2
class BioinformaticAnalysisParser {

    /**
     * Possible product groups
     *
     * This enum describes the product groups into which the products of an offer are listed.
     *
     */
    enum RootFolderTypes {
        QUALITYCONTROL("qualityControl"),
        PIPELINEINFORMATION("pipelineInformation"),
        PROCESSFOLDERS("processFolders")
        private String name

        RootFolderTypes(String name) {
            this.name = name;
        }

        String getName() {
            return this.name;
        }
    }

    /**
     * Possible product groups
     *
     * This enum describes the product groups into which the products of an offer are listed.
     *
     */
    enum RootFileTypes {
        RUNID("runId"),
        SAMPLEID("sampleIds"),

        private String name

        RootFileTypes(String name) {
            this.name = name;
        }

        String getName() {
            return this.name;
        }
    }

    /**
     * Generates a map representing the folder structure
     * @param directory path of directory whose fileTree should be converted into map
     */
    static String parseFileStructure(Path directory) {
        Map fileTreeMap = DirectoryConverter.fileTreeToMap(directory)
        String json = mapToJson(fileTreeMap)
        return json
    }

    /**
     * Method which converts a map into json String
     * @param map a nested map representing a fileTree structure
     */
    private static String mapToJson(Map map) {
        ObjectMapper jsonMapper = new ObjectMapper()
        String json = jsonMapper.writeValueAsString(map)
        return json
    }

    /*
     * Converts a file tree into a json object.
     */
    private static class DirectoryConverter {

        /**
         *
         * @param path a path to the directory which will be used as root for parsing
         * @return a Map describing the file tree starting from the given path
         */
        static Map fileTreeToMap(Path path) {
            File rootLocation = new File(path.toString())
            if (rootLocation.isFile()) {
                log.error("Expected directory. Got file instead.")
                throw new NotDirectoryException("Expected a directory. Got a file instead.")
            } else if (rootLocation.isDirectory()) {
                //Check if existing Directory is empty
                if (rootLocation.list().length > 0) {
                    Map rootStructure = convertRoot(rootLocation)
                    // Recursive conversion
                    println(rootStructure)
                    //ToDo find out what's missing here
                    Map folderStructure = convertDirectory(rootLocation.toPath())
                    println(folderStructure)
                    return convertToRelativePaths(rootStructure, rootLocation.toPath())
                } else {
                    log.error("Specified directory is empty")
                    throw new ParseException("Parsed directory might not be empty", -1)
                }
            } else {
                if (!rootLocation.exists()) {
                    log.error("The given directory does not exist.")
                    throw new FileNotFoundException("The given path does not exist.")
                } else {
                    log.error("Input path could not be processed")
                    throw new IOException()
                }
            }

        }

        /**
         * Convert a directory structure to a map, following the BioinformaticAnalysis schema.
         * @param a path to the current location in recursion
         * @return a map representing a directory with name, path and children as keys
         */
        private static Map convertRoot(File file) {
            Map rootFileTree = [:]
            ArrayList processFolders = []
            file.listFiles().each {
                if (it.isFile()) {
                    switch(it.getName()) {
                        case "run_id.txt":
                            rootFileTree[RootFileTypes.RUNID.name] = convertFile(it.toPath())
                            break
                        case "sample_ids.txt":
                            rootFileTree[RootFileTypes.SAMPLEID.name] = convertFile(it.toPath())
                            break
                        default:
                            log.error("Uncategorized File found: " + it.getName())
                            break
                    }
                } else if (it.isDirectory()) {
                    switch(it.getName()) {
                        case "multiqc":
                            rootFileTree[RootFolderTypes.QUALITYCONTROL.name] = convertDirectory(it.toPath())
                            break
                        case "pipeline_info":
                            rootFileTree[RootFolderTypes.PIPELINEINFORMATION.name] = convertDirectory(it.toPath())
                            break
                        default:
                            processFolders.add(convertDirectory(it.toPath()))
                            break
                    }

                }
            }
            rootFileTree[RootFolderTypes.PROCESSFOLDERS.name] = processFolders
            return rootFileTree
        }

        /**
         * Convert a directory structure to a map, following the BioinformaticAnalysis schema.
         * @param a path to the current location in recursion
         * @return a map representing a directory with name, path and children as keys
         */
        private static Map convertDirectory(Path path) {
            File currentDirectory = new File(path.toString())
            String name = currentDirectory.getName()
            List children = currentDirectory.listFiles().collect {
                file ->
                    if (file.isFile()) {
                        convertFile(file.toPath())
                    } else if (file.isDirectory()) {
                        convertDirectory(file.toPath())
                    }
            }

            def convertedDirectory = [
                    "name"    : name,
                    "path"    : path,
                    "children": children
            ]

            return convertedDirectory
        }

        private static Map convertToRelativePaths(Map content, Path root) {
            //Since each value in the root map is a map we need to iterate over each key/value pair
            content.each {
                Map currentValue = it.getValue() as Map
                //ToDo Why does this not work?
                currentValue["path"] = toRelativePath(currentValue["path"] as String, root)
                if (currentValue["children"]) {
                    // Children always contains a map, so convert recursively
                    currentValue["children"] = (currentValue["children"] as List).collect { convertToRelativePaths(it as Map, root) }
                }
            }
            return content

        }

        private static String toRelativePath(String path, Path root) {
            if (root.toString().equals(path)) {
                return "./"
            } else {
                return path.replace("${root.toString()}/", "")
            }
        }

        /**
         * File to JSON converter
         * @param a path to the current file in recursion
         * @return a map representing the file with name, path and file_type as keys
         */
        private static Map convertFile(Path path) {
            File currentFile = new File(path.toString())
            String name = currentFile.getName()
            String fileType = determineFileType(name)


            def convertedFile = [
                    "name"     : name,
                    "path"     : path,
                    "file_type": fileType
            ]
            return convertedFile
        }

        /**
         * This method extracts the file type also called extension from the filename.
         * The type defaults to the substring after the last `.` character in the string.
         * @param fileName the full name of the file including extension
         * @return the extension of the filename that was provided
         */
        private static String determineFileType(String fileName) {
            // defaults to the string following the last '.' in the filename
            String fileType = fileName.tokenize('.').last()

            return fileType
        }

    }

}
